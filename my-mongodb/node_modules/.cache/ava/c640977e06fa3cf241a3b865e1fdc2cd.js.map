{"version":3,"sources":["test/collection/User.spec.js"],"names":["test","before","it","Test","getDatabase","db","users","Users","context","user","insert","result","find","deepEqual","JSON","stringify","results"],"mappings":";;;;;;;;AAAA;;AAEA;;AAEA;;AAEA;;AAEAA,aAAKC,MAAL;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAY,iBAAMC,EAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACJF,YAAAA,IADI,GACG,IAAIG,aAAJ,EADH;AAAA;AAAA,mBAEOH,IAAI,CAACI,WAAL,EAFP;;AAAA;AAEJC,YAAAA,EAFI;AAIJC,YAAAA,KAJI,GAII,IAAIC,cAAJ,CAAU;AAAEF,cAAAA,EAAE,EAAFA;AAAF,aAAV,CAJJ;AAKVH,YAAAA,EAAE,CAACM,OAAH,CAAWF,KAAX,GAAmBA,KAAnB;;AALU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAZ;;AAAA;AAAA;AAAA;AAAA;;AAQA,kBAAK,iCAAL;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAwC,kBAAMJ,EAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAChCO,YAAAA,IADgC,GACzB;AAAE,oBAAM,CAAR;AAAW,sBAAQ;AAAnB,aADyB;AAAA;AAAA,mBAEhCP,EAAE,CAACM,OAAH,CAAWF,KAAX,CAAiBI,MAAjB,CAAwBD,IAAxB,CAFgC;;AAAA;AAGhCE,YAAAA,MAHgC,GAGvBT,EAAE,CAACM,OAAH,CAAWF,KAAX,CAAiBM,IAAjB,EAHuB;AAKtCV,YAAAA,EAAE,CAACW,SAAH,CAAaC,IAAI,CAACC,SAAL,CAAeJ,MAAf,CAAb,EAAqC,IAArC;;AALsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxC;;AAAA;AAAA;AAAA;AAAA;AAQA,kBAAK,+BAAL;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAsC,kBAAMT,EAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACdA,EAAE,CAACM,OAAH,CAAWF,KAAX,CAAiBM,IAAjB,EADc;;AAAA;AAC9BI,YAAAA,OAD8B;AAEpCd,YAAAA,EAAE,CAACW,SAAH,CAAaC,IAAI,CAACC,SAAL,CAAeJ,MAAf,CAAb,EAAqC,IAArC;;AAFoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtC;;AAAA;AAAA;AAAA;AAAA;AAKA,kBAAK,iCAAL;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAwC,kBAAMT,EAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxC;;AAAA;AAAA;AAAA;AAAA;AAGA,kBAAK,iCAAL;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAwC,kBAAMA,EAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxC;;AAAA;AAAA;AAAA;AAAA","sourceRoot":"/Users/crux/Templates/my-babel-mongodb","sourcesContent":["import \"@babel/register\";\n\nimport test from 'ava';\n\nimport Test from 'database/Test';\n\nimport Users from 'collection/Users';\n\ntest.before(async it => {\n  const test = new Test();\n  const db = await test.getDatabase();\n\n  const users = new Users({ db });\n  it.context.users = users;\n});\n\ntest('[collection] -> User :: insert;', async it => {\n  const user = { \"id\": 1, \"name\": \"paul allen\" };\n  await it.context.users.insert(user);\n  const result = it.context.users.find();\n\n  it.deepEqual(JSON.stringify(result), '[]');\n});\n\ntest('[collection] -> User :: find;', async it => {\n  const results = await it.context.users.find();\n  it.deepEqual(JSON.stringify(result), '[]');\n});\n\ntest('[collection] -> User :: delete;', async it => {\n});\n\ntest('[collection] -> User :: update;', async it => {\n});\n\n"]}