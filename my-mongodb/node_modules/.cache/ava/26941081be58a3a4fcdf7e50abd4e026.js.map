{"version":3,"sources":["test/collection/User.spec.js"],"names":["test","before","it","Test","getDatabase","db","users","Users","context","serial","find","result","deepEqual","JSON","stringify","user","insert","selector","_id","document","$set","updateOne","filter","deleteOne"],"mappings":"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","sourceRoot":"/Users/crux/Templates/my-babel-mongodb","sourcesContent":["import \"@babel/register\";\n\nimport test from 'ava';\n\nimport Test from 'database/Test';\n\nimport Users from 'collection/Users';\n\ntest.before(async it => {\n  const test = new Test();\n  const db = await test.getDatabase();\n\n  const users = new Users({ db });\n  it.context.users = users;\n});\n\ntest.serial('[collection] -> User :: find;', async it => {\n  const result = await it.context.users.find();\n  it.deepEqual(JSON.stringify(result), '[]');\n});\n\ntest.serial('[collection] -> User :: insert;', async it => {\n  const user = { \"_id\": 1, \"name\": \"Paul Allen\" };\n  await it.context.users.insert(user);\n  const result = await it.context.users.find();\n\n  it.deepEqual(JSON.stringify(result), '[{\"_id\":1,\"name\":\"Paul Allen\"}]');\n});\n\ntest.serial('[collection] -> User :: update;', async it => {\n  const selector = { _id: 1 };\n  const document = { $set: {  _id: 1, \"name\": \"Yuki Hsu\" } };\n  await it.context.users.updateOne(selector, document);\n  const result = await it.context.users.find();\n\n  it.deepEqual(JSON.stringify(result), '[{\"_id\":1,\"name\":\"Yuki Hsu\"}]');\n});\n\ntest.serial('[collection] -> User :: delete;', async it => {\n  const filter = { \"_id\": 1 };\n  await it.context.users.deleteOne(filter);\n  const result = await it.context.users.find();\n\n  it.deepEqual(JSON.stringify(result), '[]');\n});\n"]}