{"version":3,"sources":["test/collection/User.spec.js"],"names":["test","beforeEach","it","Test","getDatabase","db","users","Users","user","find","results","deepEqual","JSON","stringify","result"],"mappings":";;;;;;;;AAAA;;AAEA;;AAEA;;AAEA;;AAEAA,aAAKC,UAAL;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAgB,iBAAMC,EAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACRF,YAAAA,IADQ,GACD,IAAIG,aAAJ,EADC;AAAA;AAAA,mBAEGH,IAAI,CAACI,WAAL,EAFH;;AAAA;AAERC,YAAAA,EAFQ;AAIRC,YAAAA,KAJQ,GAIA,IAAIC,cAAJ,CAAU;AAAEF,cAAAA,EAAE,EAAFA;AAAF,aAAV,CAJA;AAKdH,YAAAA,EAAE,CAACI,KAAH,GAAWA,KAAX;;AALc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAAA;AAAA;AAAA;AAAA;;AAQA,kBAAK,+BAAL;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAsC,kBAAMJ,EAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACdA,EAAE,CAACM,IAAH,CAAQC,IAAR,EADc;;AAAA;AAC9BC,YAAAA,OAD8B;AAEpCR,YAAAA,EAAE,CAACS,SAAH,CAAaC,IAAI,CAACC,SAAL,CAAeC,MAAf,CAAb,EAAqC,IAArC;;AAFoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtC;;AAAA;AAAA;AAAA;AAAA;AAKA,kBAAK,+BAAL;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAsC,kBAAMZ,EAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtC;;AAAA;AAAA;AAAA;AAAA;AAGA,kBAAK,+BAAL;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAsC,kBAAMA,EAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtC;;AAAA;AAAA;AAAA;AAAA;AAGA,kBAAK,+BAAL;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAsC,kBAAMA,EAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtC;;AAAA;AAAA;AAAA;AAAA","sourceRoot":"/Users/crux/Templates/my-babel-mongodb","sourcesContent":["import \"@babel/register\";\n\nimport test from 'ava';\n\nimport Test from 'database/Test';\n\nimport Users from 'collection/Users';\n\ntest.beforeEach(async it => {\n  const test = new Test();\n  const db = await test.getDatabase();\n\n  const users = new Users({ db });\n  it.users = users;\n});\n\ntest('[collection] -> User :: find;', async it => {\n  const results = await it.user.find();\n  it.deepEqual(JSON.stringify(result), '[]');\n});\n\ntest('[collection] -> User :: find;', async it => {\n});\n\ntest('[collection] -> User :: find;', async it => {\n});\n\ntest('[collection] -> User :: find;', async it => {\n});\n"]}