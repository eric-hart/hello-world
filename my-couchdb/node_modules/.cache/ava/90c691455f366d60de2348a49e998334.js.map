{"version":3,"sources":["test/entity/Users.spec.js"],"names":["test","beforeEach","it","method","result","context","users","Users","serial","get","id","deepEqual","JSON","stringify","entity","name","put","pass","delete"],"mappings":";;;;;;;;AAAA;;AAEA;;AAEA;;AAEA;;AAEAA,aAAKC,UAAL;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAgB,iBAAOC,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACO,wBAAM,6BAAN,EAAqC;AAAEC,cAAAA,MAAM,EAAE;AAAV,aAArC,CADP;;AAAA;AACRC,YAAAA,MADQ;AAEdF,YAAAA,EAAE,CAACG,OAAH,CAAWC,KAAX,GAAmB,IAAIC,cAAJ,EAAnB;;AAFc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAAA;AAAA;AAAA;AAAA;;AAKAP,aAAKQ,MAAL,CAAY,gCAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,4BAA8C,kBAAON,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACvBA,EAAE,CAACG,OAAH,CAAWC,KAAX,CAAiBG,GAAjB,CAAqB;AAAEC,cAAAA,EAAE,EAAE;AAAN,aAArB,CADuB;;AAAA;AACtCN,YAAAA,MADsC;AAE5CF,YAAAA,EAAE,CAACS,SAAH,CAAaC,IAAI,CAACC,SAAL,CAAeT,MAAf,CAAb,EAAqC,0CAArC;;AAF4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA9C;;AAAA;AAAA;AAAA;AAAA;;AAKAJ,aAAKQ,MAAL,CAAY,gCAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,4BAA8C,kBAAON,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACtCY,YAAAA,MADsC,GAC7B;AAAEJ,cAAAA,EAAE,EAAE,CAAN;AAASK,cAAAA,IAAI,EAAE;AAAf,aAD6B;AAAA;AAAA,mBAEtCb,EAAE,CAACG,OAAH,CAAWC,KAAX,CAAiBU,GAAjB,CAAqB;AAAEN,cAAAA,EAAE,EAAE,CAAN;AAASI,cAAAA,MAAM,EAANA;AAAT,aAArB,CAFsC;;AAAA;AAAA;AAAA,mBAIzBZ,EAAE,CAACG,OAAH,CAAWC,KAAX,CAAiBG,GAAjB,CAAqB;AAAEC,cAAAA,EAAE,EAAE;AAAN,aAArB,CAJyB;;AAAA;AAIxCN,YAAAA,MAJwC;AAK5CF,YAAAA,EAAE,CAACe,IAAH;;AAL4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA9C;;AAAA;AAAA;AAAA;AAAA;;AAQAjB,aAAKQ,MAAL,CAAY,mCAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAiD,kBAAON,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC/CA,YAAAA,EAAE,CAACG,OAAH,CAAWC,KAAX,CAAiBY,MAAjB,CAAwB;AAAER,cAAAA,EAAE,EAAE;AAAN,aAAxB;AAD+C;AAAA,mBAG1BR,EAAE,CAACG,OAAH,CAAWC,KAAX,CAAiBG,GAAjB,CAAqB;AAAEC,cAAAA,EAAE,EAAE;AAAN,aAArB,CAH0B;;AAAA;AAGzCN,YAAAA,MAHyC;AAI/CF,YAAAA,EAAE,CAACS,SAAH,CAAaC,IAAI,CAACC,SAAL,CAAeT,MAAf,CAAb,EAAqC,6CAArC;;AAJ+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjD;;AAAA;AAAA;AAAA;AAAA","sourceRoot":"/Users/crux/Templates/my-couchdb","sourcesContent":["import '@babel/register';\n\nimport fetch from 'node-fetch';\n\nimport test from 'ava';\n\nimport Users from 'entity/Users';\n\ntest.beforeEach(async (it) => {\n  const result = await fetch('http://127.0.0.1:5984/users', { method: 'PUT' });\n  it.context.users = new Users();\n});\n\ntest.serial('[entity] Users -> get :: spec;', async (it) => {\n  const result = await it.context.users.get({ id: 1 });\n  it.deepEqual(JSON.stringify(result), '{\"error\":\"not_found\",\"reason\":\"missing\"}');\n});\n\ntest.serial('[entity] Users -> put :: spec;', async (it) => {\n  const entity = { id: 1, name: 'Paul Allen' };\n  await it.context.users.put({ id: 1, entity });\n\n  let result = await it.context.users.get({ id: 1 });\n  it.pass();\n});\n\ntest.serial('[entity] Users -> delete :: spec;', async (it) => {\n  it.context.users.delete({ id: 1 });\n\n  const result = await it.context.users.get({ id: 1 });\n  it.deepEqual(JSON.stringify(result), '{\"error\":\"not_found\",\"reason\":\"no_db_file\"}');\n});\n"]}