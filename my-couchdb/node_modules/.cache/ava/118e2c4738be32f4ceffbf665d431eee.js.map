{"version":3,"sources":["test/entity/Users.spec.js"],"names":["test","beforeEach","it","context","users","Users","serial","get","id","result","deepEqual","JSON","stringify","entity","name","put","user","parse","delete"],"mappings":";;;;;;;;AAAA;;AAEA;;AAEA;;AAEAA,aAAKC,UAAL,CAAgB,UAACC,EAAD,EAAQ;AACtBA,EAAAA,EAAE,CAACC,OAAH,CAAWC,KAAX,GAAmB,IAAIC,cAAJ,EAAnB;AACD,CAFD;;AAIAL,aAAKM,MAAL,CAAY,gCAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,4BAA8C,iBAAOJ,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACvBA,EAAE,CAACC,OAAH,CAAWC,KAAX,CAAiBG,GAAjB,CAAqB;AAAEC,cAAAA,EAAE,EAAE;AAAN,aAArB,CADuB;;AAAA;AACtCC,YAAAA,MADsC;AAE5CP,YAAAA,EAAE,CAACQ,SAAH,CAAaC,IAAI,CAACC,SAAL,CAAeH,MAAf,CAAb,EAAqC,0CAArC;;AAF4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA9C;;AAAA;AAAA;AAAA;AAAA;;AAKAT,aAAKM,MAAL,CAAY,gCAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,4BAA8C,kBAAOJ,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACtCW,YAAAA,MADsC,GAC7B;AAAEL,cAAAA,EAAE,EAAE,CAAN;AAASM,cAAAA,IAAI,EAAE;AAAf,aAD6B;AAAA;AAAA,mBAEtCZ,EAAE,CAACC,OAAH,CAAWC,KAAX,CAAiBW,GAAjB,CAAqB;AAAEP,cAAAA,EAAE,EAAE,CAAN;AAASK,cAAAA,MAAM,EAANA;AAAT,aAArB,CAFsC;;AAAA;AAAA;AAAA,mBAIvBX,EAAE,CAACC,OAAH,CAAWC,KAAX,CAAiBG,GAAjB,CAAqB;AAAEC,cAAAA,EAAE,EAAE;AAAN,aAArB,CAJuB;;AAAA;AAItCC,YAAAA,MAJsC;AAKtCO,YAAAA,IALsC,GAK/BL,IAAI,CAACM,KAAL,CAAWR,MAAX,CAL+B;AAM5CP,YAAAA,EAAE,CAACQ,SAAH,CAAaM,IAAI,CAACR,EAAlB,EAAsB,CAAtB;AACAN,YAAAA,EAAE,CAACQ,SAAH,CAAaM,IAAI,CAACF,IAAlB,EAAwB,YAAxB;;AAP4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA9C;;AAAA;AAAA;AAAA;AAAA;;AAUAd,aAAKM,MAAL,CAAY,mCAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAiD,kBAAOJ,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC/CA,YAAAA,EAAE,CAACC,OAAH,CAAWC,KAAX,CAAiBc,MAAjB,CAAwB;AAAEV,cAAAA,EAAE,EAAE;AAAN,aAAxB;AAD+C;AAAA,mBAG1BN,EAAE,CAACC,OAAH,CAAWC,KAAX,CAAiBG,GAAjB,CAAqB;AAAEC,cAAAA,EAAE,EAAE;AAAN,aAArB,CAH0B;;AAAA;AAGzCC,YAAAA,MAHyC;AAI/CP,YAAAA,EAAE,CAACQ,SAAH,CAAaC,IAAI,CAACC,SAAL,CAAeH,MAAf,CAAb,EAAqC,6CAArC;;AAJ+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjD;;AAAA;AAAA;AAAA;AAAA","sourceRoot":"/Users/crux/Templates/my-couchdb","sourcesContent":["import '@babel/register';\n\nimport test from 'ava';\n\nimport Users from 'entity/Users';\n\ntest.beforeEach((it) => {\n  it.context.users = new Users();\n});\n\ntest.serial('[entity] Users -> get :: spec;', async (it) => {\n  const result = await it.context.users.get({ id: 1 });\n  it.deepEqual(JSON.stringify(result), '{\"error\":\"not_found\",\"reason\":\"missing\"}');\n});\n\ntest.serial('[entity] Users -> put :: spec;', async (it) => {\n  const entity = { id: 1, name: 'Paul Allen' };\n  await it.context.users.put({ id: 1, entity });\n\n  const result = await it.context.users.get({ id: 1 });\n  const user = JSON.parse(result);\n  it.deepEqual(user.id, 1);\n  it.deepEqual(user.name, 'Paul Allen');\n});\n\ntest.serial('[entity] Users -> delete :: spec;', async (it) => {\n  it.context.users.delete({ id: 1 });\n\n  const result = await it.context.users.get({ id: 1 });\n  it.deepEqual(JSON.stringify(result), '{\"error\":\"not_found\",\"reason\":\"no_db_file\"}');\n});\n"]}